name: Build and deploy to web cPanel with CloudLinux

on:
  push:
    branches: [main]

  workflow_dispatch:

jobs:
  build_and_deploy:
    name: Build and Deploy the Web and API servers.
    runs-on: ubuntu-latest
    env:
      HOSTING_APP_INSTALL_DIRECTORY: ${{ vars.HOSTING_APP_INSTALL_DIRECTORY }}
      HOSTING_APP_DOMAIN: ${{ vars.HOSTING_APP_DOMAIN }}
      HOSTING_APP_SUBDOMAIN: ${{ vars.HOSTING_APP_SUBDOMAIN }}
      HOSTING_APP_FULLDOMAIN: ${{ vars.HOSTING_APP_SUBDOMAIN != '' && format('{0}.{1}', vars.HOSTING_APP_SUBDOMAIN, vars.HOSTING_APP_DOMAIN) || vars.HOSTING_APP_DOMAIN }}
      HOSTING_APP_URLPATH: "/api"
      HOSTING_WEB_INSTALL_DIRECTORY: ${{ vars.HOSTING_WEB_INSTALL_DIRECTORY }}
      MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
      MYSQL_USER: ${{ vars.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_HOST: ${{ vars.MYSQL_HOST }}
      MYSQL_PORT: ${{ vars.MYSQL_PORT }}

    steps:
      - name: Check out source
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1

      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: 22
          cache: "npm"

      - name: Install API node modules
        run: npm ci
        working-directory: ./api

      - name: Build the API
        run: npm run build
        working-directory: ./api

      - name: Run the API tests
        run: npm run test
        working-directory: ./api

      - name: Install front-end node modules
        run: npm ci
        working-directory: ./front-end

      - name: Build the front-end
        run: npm run build
        working-directory: ./front-end

      - name: Configure SSH
        run: |
          # Ensure the SSH directory exists
          mkdir -p ~/.ssh/

          # Create the SSH public key file, converting any inline '\n' characters to actual newlines
          echo "$HOSTING_SSH_PRIVATE_KEY" | sed 's/\\n/\n/g' > ~/.ssh/hosting.key
          chmod 600 ~/.ssh/hosting.key

          # Create the SSH config file describing how to connect to the 'hosting' host.
          cat >>~/.ssh/config <<END
          Host hosting
            HostName $HOSTING_SSH_HOST
            Port $HOSTING_SSH_HOST_PORT
            User $HOSTING_SSH_USER
            IdentityFile ~/.ssh/hosting.key
            StrictHostKeyChecking no
            BatchMode yes
            PubkeyAuthentication yes
          END
        env:
          HOSTING_SSH_HOST: ${{ vars.HOSTING_SSH_HOST }}
          HOSTING_SSH_HOST_PORT: ${{ vars.HOSTING_SSH_HOST_PORT }}
          HOSTING_SSH_USER: ${{ vars.HOSTING_SSH_USER }}
          HOSTING_SSH_PRIVATE_KEY: ${{ secrets.HOSTING_SSH_PRIVATE_KEY }}

      - name: Ensure database exists
        run: |
          ssh hosting <<EOF
          set -e
          set -x

          DATABASE_EXISTS=\$(uapi --output json Mysql list_databases | jq 'any(.result.data[]; .database == "$MYSQL_DATABASE")')

          if [ "x\$DATABASE_EXISTS" != "xtrue" ]; then
            echo "Creating database $MYSQL_DATABASE"
            uapi --output=json Mysql create_database name='$MYSQL_DATABASE'
            uapi --output=json Mysql create_user name='$MYSQL_USER' password='$MYSQL_PASSWORD'
            uapi --output=json Mysql set_privileges_on_database user='$MYSQL_USER' database='$MYSQL_DATABASE' privileges='ALL PRIVILEGES'
          else
            echo "Database $MYSQL_DATABASE already exists"
          fi
          EOF

      - name: Ensure the hosting domain exists
        if: ${{ env.HOSTING_APP_SUBDOMAIN != '' }}
        run: |
          ssh hosting <<EOF

          DOMAIN_EXISTS=\$(uapi --output=json DomainInfo single_domain_data domain=$HOSTING_APP_FULLDOMAIN | jq '.result.status')

          if [ "\$DOMAIN_EXISTS" -ne "1" ]; then
            echo "Creating domain $HOSTING_APP_FULLDOMAIN"
            uapi --output=jsonpretty SubDomain addsubdomain domain='$HOSTING_APP_SUBDOMAIN' rootdomain='$HOSTING_APP_DOMAIN' dir='$HOSTING_WEB_INSTALL_DIRECTORY'
          else
            echo "Domain $HOSTING_APP_FULLDOMAIN already exists"
          fi
          EOF

      - name: Copy front-end files
        run: scp -r dist/* "hosting:$HOSTING_WEB_INSTALL_DIRECTORY"
        working-directory: ./front-end

      - name: Destroy and remove the existing hosted node app, if any
        run: |
          ssh hosting <<EOF 
          /usr/sbin/cloudlinux-selector destroy --json --interpreter nodejs --app-root $HOSTING_APP_INSTALL_DIRECTORY
          if [ -d $HOSTING_APP_INSTALL_DIRECTORY ]; then 
            rm -r $HOSTING_APP_INSTALL_DIRECTORY
          fi
          EOF

      - name: Create and stop the new hosted node app
        run: |
          ssh hosting <<EOF
          /usr/sbin/cloudlinux-selector create --json --interpreter nodejs --domain $HOSTING_APP_FULLDOMAIN --app-root $HOSTING_APP_INSTALL_DIRECTORY --app-uri $HOSTING_APP_URLPATH --version 22 --app-mode production --startup-file dist/src/index.js
          /usr/sbin/cloudlinux-selector stop --json --interpreter nodejs --app-root $HOSTING_APP_INSTALL_DIRECTORY
          EOF

      - name: Copy package.json and package-lock.json files
        run: scp package.json package-lock.json "hosting:$HOSTING_APP_INSTALL_DIRECTORY"
        working-directory: ./api

      - name: Copy distribution
        run: scp -r dist/ "hosting:$HOSTING_APP_INSTALL_DIRECTORY"
        working-directory: ./api

      - name: Create the application's .env file
        run: |
          ssh hosting <<EOF
          cat >$HOSTING_APP_INSTALL_DIRECTORY/.env <<END
          NODE_ENV=production

          # Connection details for the MySQL database.
          MYSQL_DATABASE=$MYSQL_DATABASE
          MYSQL_USER=$MYSQL_USER
          MYSQL_PASSWORD=$MYSQL_PASSWORD
          MYSQL_HOST=$MYSQL_HOST
          MYSQL_PORT=$MYSQL_PORT
          END
          EOF

      - name: Install modules and start the node app
        run: |
          ssh hosting <<EOF
          /usr/sbin/cloudlinux-selector install-modules --json --interpreter nodejs --app-root $HOSTING_APP_INSTALL_DIRECTORY
          /usr/sbin/cloudlinux-selector start --json --interpreter nodejs --app-root $HOSTING_APP_INSTALL_DIRECTORY
          EOF
